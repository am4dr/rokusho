
plugins {
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'org.jetbrains.kotlin.jvm' version '1.2.51' apply false
}

ext {
    submoduleProjects = ['launcher', 'javafx-commons', 'javafx-controls', 'core', 'presenter'].collect { project ":$it" }
    // TODO あとで置き換える
    javafxClassifier = 'win'
    libraries = [
            kotlin: [
                    stdlib: 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.2.51',
                    reflect: 'org.jetbrains.kotlin:kotlin-reflect:1.2.51',
            ],
            junit: [
                    api: ['org.junit.jupiter:junit-jupiter-api:5.2.0',
                          'org.junit.jupiter:junit-jupiter-params:5.2.0'],
                    engine: 'org.junit.jupiter:junit-jupiter-engine:5.2.0',
            ],
            commons: [
                    cli: 'commons-cli:commons-cli:1.4',
            ],
            snakeyaml: 'org.yaml:snakeyaml:1.21',
            slf4j: [
                    api: 'org.slf4j:slf4j-api:1.7.25',
            ],
            logback: 'ch.qos.logback:logback-classic:1.2.3',
            sample_viewer: 'com.github.am4dr.javafx:gui-sample-viewer:0.4.2-SNAPSHOT',
            javafx: [
                    "org.openjfx:javafx-base:11.0.1:$javafxClassifier",
                    "org.openjfx:javafx-controls:11.0.1:$javafxClassifier",
                    "org.openjfx:javafx-graphics:11.0.1:$javafxClassifier"
            ],
    ]
}

allprojects {
    group = 'com.github.am4dr.rokusho'
    version = '0.2.0-SNAPSHOT'
    repositories {
        mavenLocal()
        jcenter()
    }
}

configure(submoduleProjects) {
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'java-library'
    archivesBaseName = "rokusho-$it.name"

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions.jvmTarget = '1.8'
    }
    dependencies {
        api libraries.kotlin.stdlib
        implementation libraries.kotlin.reflect

        testImplementation libraries.junit.api
        testRuntimeOnly libraries.junit.engine

        api libraries.slf4j.api
        runtimeOnly libraries.logback
    }
    test {
        useJUnitPlatform()
    }
}
project(':core') {
    dependencies {
        implementation libraries.javafx
        implementation project(':javafx-commons')
        implementation libraries.snakeyaml
    }
}
project(':javafx-controls') {
    sourceSets {
        sample
    }
    dependencies {
        implementation project(':javafx-commons')
        api libraries.javafx

        sampleImplementation libraries.kotlin.reflect
        sampleImplementation libraries.sample_viewer
        sampleImplementation sourceSets.main.runtimeClasspath
    }
    task runGuiSamples(type: JavaExec, dependsOn: classes) {
        classpath sourceSets.sample.runtimeClasspath
        main = 'com.github.am4dr.rokusho.javafx.control.sample.GUISamples'
        args = ['--path=build/classes/kotlin/main',
                '--load-only-path=build/classes/kotlin/sample']
    }
    task runGuiSamplesAllReload(type: JavaExec, dependsOn: classes) {
        classpath sourceSets.sample.runtimeClasspath
        main = 'com.github.am4dr.rokusho.javafx.control.sample.GUISamples'
        args = ["--path=${['build/classes/kotlin/main', 'build/classes/kotlin/sample'].join(File.pathSeparator)}",
        ]
    }
}
project(':presenter') {
    dependencies {
        api project(':core')
        api libraries.javafx
        implementation project(':javafx-controls')
        implementation project(':javafx-commons')
    }
}
project(':launcher') {
    dependencies {
        api libraries.javafx
        implementation project(':presenter')
        implementation project(':javafx-controls')
        implementation project(':javafx-commons')
        implementation libraries.commons.cli
    }
}
project(':javafx-commons') {
    dependencies {
        api libraries.javafx
    }
}

project(':application') {
    apply plugin: 'application'
    archivesBaseName = "rokusho-$it.name"

    mainClassName = 'com.github.am4dr.rokusho.launcher.GUILauncher'
    dependencies {
        runtimeOnly submoduleProjects
    }
    jar {
        onlyIf { false }
    }
    run {
        if (project.hasProperty('args')) {
            args = project.getProperty('args').split(/\s+/).grep()
        }
    }
}
